<template>
  <div class="pulldown-container">
    <!-- 选择框 -->
    <div class="pulldown-box" @click="toggleDropdown" :class="{ selected: isSelected }">
      <span class="selected-text">{{ selectedLabel || placeholder }}</span>
      <span class="material-icons pulldown-icon">arrow_drop_down</span>
    </div>

    <!-- 下拉选项 -->
    <ul v-if="isOpen" class="dropdown-menu">
      <li
        v-for="option in options"
        :key="option.value"
        @click="selectOption(option)"
        :class="{ active: modelValue === option.value }"
      >
        {{ option.label }}
      </li>
    </ul>
  </div>
</template>

<script setup>
import { ref, computed, defineProps, defineEmits } from "vue";

const props = defineProps({
  modelValue: String, // 选中的值
  options: Array, // 选项列表 [{ label: "昭和", value: "showa" }, ...]
  placeholder: { type: String, default: "選択してください" }, // 默认占位文本
});

const emit = defineEmits(["update:modelValue"]);

const isOpen = ref(false);
const isSelected = computed(() => !!props.modelValue);
const selectedLabel = computed(() => {
  const selected = props.options.find(option => option.value === props.modelValue);
  return selected ? selected.label : "";
});

const toggleDropdown = () => {
  isOpen.value = !isOpen.value;
};

const selectOption = (option) => {
  emit("update:modelValue", option.value);
  isOpen.value = false;
};
</script>

<style scoped>
/* 外部容器 */
.pulldown-container {
  position: relative;
  width: 200px;
}

/* 选择框 */
.pulldown-box {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 10px 15px;
  border: 1px solid #cccccc;
  border-radius: 8px;
  background-color: #fffae0;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 50px;
  max-width: 200px;
}

/* 选中状态 */
.selected {
  border-color: #1588df;
  background-color: #e4f2fd;
}

/* 选中的文本 */
.selected-text {
  font-size: 22pt;
  font-weight: medium;
  color: #232323;
}

/* 下拉箭头 */
.pulldown-icon {
  font-size: 28px;
  color: #269d4d;
}

/* 下拉菜单 */
.dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background: white;
  border: 1px solid #cccccc;
  border-radius: 4px;
  list-style: none;
  padding: 0;
  margin: 5px 0;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
}

/* 下拉选项 */
.dropdown-menu li {
  padding: 10px 15px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.dropdown-menu li:hover {
  background: #fffae0;
}

/* 选中状态 */
.dropdown-menu li.active {
  background: #1588df;
  color: white;
}
</style>



<template>
  <div
    class="radio-button"
    :class="{ selected: isSelected, error: hasError }"
    @click="selectRadio"
  >
    <!-- Radio Icon -->
    <div class="radio-icon">
      <div v-if="isSelected" class="radio-center"></div>
    </div>

    <!-- 文本 -->
    <span class="radio-label">{{ label }}</span>
  </div>
</template>

<script setup>
import { ref, defineProps, defineEmits } from "vue";

const props = defineProps({
  label: String,
  modelValue: String,  // v-model 绑定的值
  value: String,       // 当前 Radio 的值
  hasError: Boolean    // 是否显示错误状态
});

const emit = defineEmits(["update:modelValue"]);

const isSelected = ref(props.modelValue === props.value);

const selectRadio = () => {
  if (!props.hasError) {
    emit("update:modelValue", props.value);
    isSelected.value = true;
  }
};
</script>

<style scoped>
/* 外部框 */
.radio-button {
  display: flex;
  align-items: center;
  padding: 10px;
  border-radius: 8px;
  border: 1px solid #cccccc;
  background-color: #fffae0;
  cursor: pointer;
  transition: all 0.3s ease;
}

/* Radio 图标 */
.radio-icon {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  border: 1px solid #cccccc;
  background-color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 10px;
}

/* 选中状态 */
.selected {
  border-color: #1588df;
  background-color: #e4f2fd;
}

.selected .radio-icon {
  border-color: #1588df;
}

.radio-center {
  width: 20px;
  height: 20px;
  background-color: #1588df;
  border-radius: 50%;
}

/* 错误状态 */
.error {
  border-color: #cccccc;
  background-color: #fff0f0;
}

.error .radio-icon {
  border-color: #cccccc;
}
</style>
// 字体族
$font-primary: "Noto Sans CJK JP", sans-serif;
$font-system: "Segoe UI", Meiryo, "Yu Gothic", "Hiragino Kaku Gothic ProN", sans-serif;

// 字重
$font-weight-bold: 700;
$font-weight-medium: 500;
$font-weight-regular: 400;

// 标题字体大小
$font-sizes: (
  "h1": 30pt,
  "h2": 22pt,
  "h3": 18pt,
  "h4": 14pt
);

// 正文 & 按钮字体大小
$text-sizes: (
  "body": 22pt,
  "caption": 14pt,
  "button-lg": 22pt,
  "button-md": 18pt,
  "button-sm": 14pt
);

@each $level, $size in $font-sizes {
  .#{$level} {
    font-size: $size;
    font-weight: $font-weight-bold;
    font-family: $font-primary;
  }
}
@each $name, $size in $text-sizes {
  .text-#{$name} {
    font-size: $size;
    font-family: $font-primary;
  }
}

// 按钮字体加上 Medium 权重
.text-button-lg,
.text-button-md,
.text-button-sm {
  font-weight: $font-weight-medium;
}
<p class="text-body">正文文本 22pt Regular</p>
<p class="text-caption">注释文本 14pt Regular</p>
<button class="text-button-lg">大按钮</button>
<button class="text-button-md">中按钮</button>
<button class="text-button-sm">小按钮</button>

// ==========================
// _variables.scss
// 颜色变量定义
// ==========================

// 主色 (MainColor)
$main-colors: (
  "green": #269D4D,
  "orange": #EB7F00,
  "alert": #C7000D,
  "blue": #1580DF,
  "black": #232323,
  "white": #FFFFFF
);

// 次要色 (SubColor)
$sub-colors: (
  "light-green": #F1FCF2,
  "light-yellow": #FFFAD0,
  "light-pink": #FFF0F0,
  "light-blue": #E2F2FD,
  "light-gray": #F4F4F4,
  "gray": #CCCCCC,
  "dark-gray": #707070
);

// 渐变色 (Gradation)
$gradation-colors: (
  "green": (#29AB54, #0C792F),
  "green-alt": (#4DC475, #249147),
  "orange": (#F78400, #DE6C01),
  "orange-hover": (#FF8969, #DE6C01),
  "light-gray": #FCFCFC,
  "white-hover": #ECECEC
);