public class SearchPatternResolver {

    /**
     * 入力された4つの検索条件フィールドに基づいて、使用される検索パターンを判定します。
     *
     * 判定ルール（いずれか1つのみ該当）：
     *  1 → 金融機関コード検索：金融機関コード のみ入力
     *  2 → 金融機関カナ名検索：金融機関カナ名 のみ入力
     *  3 → 支店コード検索：金融機関コード ＋ 支店コード 入力
     *  4 → 支店カナ名検索：金融機関コード ＋ 支店カナ名 入力
     *
     * その他の組み合わせ（例：3項目以上、すべて空など）は不正とし、null を返します。
     *
     * @param financialCode 金融機関コード（半角）
     * @param financialKana 金融機関カナ名（全角カナ）
     * @param branchCode    支店コード（半角）
     * @param branchKana    支店カナ名（全角カナ）
     * @return 検索パターン "1"〜"4"、不正な組み合わせの場合は null
     */
    public static String determineSearchPattern(String financialCode,
                                                String financialKana,
                                                String branchCode,
                                                String branchKana) {

        boolean hasFinancialCode = notEmpty(financialCode);
        boolean hasFinancialKana = notEmpty(financialKana);
        boolean hasBranchCode = notEmpty(branchCode);
        boolean hasBranchKana = notEmpty(branchKana);

        if (hasFinancialCode && !hasFinancialKana && !hasBranchCode && !hasBranchKana) {
            return "1"; // 金融機関コード検索

        } else if (!hasFinancialCode && hasFinancialKana && !hasBranchCode && !hasBranchKana) {
            return "2"; // 金融機関カナ名検索

        } else if (hasFinancialCode && !hasFinancialKana && hasBranchCode && !hasBranchKana) {
            return "3"; // 支店コード検索

        } else if (hasFinancialCode && !hasFinancialKana && !hasBranchCode && hasBranchKana) {
            return "4"; // 支店カナ名検索

        } else {
            return null; // 不正なパターン
        }
    }

    /**
     * 文字列が null または 空白のみかどうかを判定します。
     *
     * @param value 対象の文字列
     * @return 空でなければ true、空または null の場合は false
     */
    private static boolean notEmpty(String value) {
        return value != null && !value.trim().isEmpty();
    }
}