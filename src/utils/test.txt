import axios from 'axios';

// 创建 axios 实例
const axiosInstance = axios.create({
  baseURL: '/api', // 基础 URL
  timeout: 5000,   // 请求超时时间
});

// 定义 token 和 refresh token
let token = 'initial_token'; // 初始 token
let refreshToken = 'initial_refresh_token'; // 初始 refresh token
let isRefreshing = false; // 是否正在刷新 token
let requestsQueue = []; // 队列，用于存储待重新请求的配置

// 请求拦截器
axiosInstance.interceptors.request.use(
  (config) => {
    // 在请求头中添加 token
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }

    // 检查接口路径和方法
    console.log(`请求路径: ${config.url}`);
    console.log(`请求方法: ${config.method}`);
    
    // 检查参数
    if (config.data) {
      console.log('请求参数:', config.data);
    }

    return config;
  },
  (error) => {
    // 请求异常
    console.error('请求拦截器异常:', error);
    return Promise.reject(error);
  }
);

// 响应拦截器
axiosInstance.interceptors.response.use(
  (response) => {
    // 响应成功
    console.log('响应结果:', response.data);
    return response;
  },
  async (error) => {
    const originalRequest = error.config; // 原始请求配置
    const status = error.response?.status;

    // 处理特定状态码
    if (status === 401) {
      // 未授权，尝试刷新 token
      if (!isRefreshing) {
        isRefreshing = true;

        try {
          // 发起刷新 token 请求
          const refreshResponse = await axiosInstance.post('/auth/refresh', { refreshToken });
          const newToken = refreshResponse.data.token;
          token = newToken; // 更新 token
          isRefreshing = false;

          // 重新请求队列中的所有请求
          requestsQueue.forEach((callback) => callback(newToken));
          requestsQueue = [];

          // 返回原始请求的结果
          originalRequest.headers['Authorization'] = `Bearer ${newToken}`;
          return axiosInstance(originalRequest);
        } catch (refreshError) {
          // 刷新 token 失败，强制退出登录
          console.error('刷新 token 失败:', refreshError);
          isRefreshing = false;
          token = null;
          refreshToken = null;
          // 跳转到登录页面或触发退出逻辑
          window.location.href = '/login';
          return Promise.reject(refreshError);
        }
      }

      // 如果正在刷新 token，将请求加入队列
      return new Promise((resolve) => {
        requestsQueue.push((newToken) => {
          originalRequest.headers['Authorization'] = `Bearer ${newToken}`;
          resolve(axiosInstance(originalRequest));
        });
      });
    }

    // 其他状态码的异常处理
    switch (status) {
      case 400:
        console.error('请求参数错误:', error.response.data);
        break;
      case 403:
        console.error('无权限访问:', error.response.data);
        break;
      case 404:
        console.error('资源未找到:', error.response.data);
        break;
      case 500:
        console.error('服务器内部错误:', error.response.data);
        break;
      default:
        console.error('其他错误:', error.response?.data || error.message);
    }

    return Promise.reject(error);
  }
);

export default axiosInstance;
