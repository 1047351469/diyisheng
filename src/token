export const authInterceptor = {
  onRequest: (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  onError: async (error) => {
    if (error.response?.status === 401) {
      const refreshToken = localStorage.getItem('refreshToken');
      if (refreshToken) {
        // 发起刷新 Token 的请求
        try {
          const response = await axios.post('/refresh-token', { refreshToken });
          localStorage.setItem('token', response.data.token);
          const logStore = useLogStore();
          logStore.addAuthLog({ type: 'token-refresh', success: true });
          error.config.headers.Authorization = `Bearer ${response.data.token}`;
          return axios(error.config); // 重试原请求
        } catch (refreshError) {
          const logStore = useLogStore();
          logStore.addAuthLog({ type: 'token-refresh', success: false, error: refreshError.message });
          return Promise.reject(refreshError);
        }
      }
    }
    return Promise.reject(error);
  },
};